

model Item {

    id                String        @id @default(uuid())  
    type            String?          
    content      String?          
    url              String?          
    fileUrl      String?          
    title          String?          
    description  String?          
    metadata    String?          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    organizationId  String          
    organization  Organization?  @relation(fields: [organizationId], references: [id], name:"organization")  
 
    itemCategorys  ItemCategory[]  @relation("item")  
    itemTags    ItemTag[]  @relation("item")  
    suggestionFeedbacks  SuggestionFeedback[]  @relation("item")  
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Category {

    id                String        @id @default(uuid())  
    name            String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
    itemCategorys  ItemCategory[]  @relation("category")  
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model ItemCategory {

    id                String        @id @default(uuid())  

itemId        String          
    item            Item?            @relation(fields: [itemId], references: [id], name:"item")  
    categoryId  String          
    category    Category?    @relation(fields: [categoryId], references: [id], name:"category")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Tag {

    id                String        @id @default(uuid())  
    name            String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
    itemTags    ItemTag[]  @relation("tag")  
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model ItemTag {

    id                String        @id @default(uuid())  

itemId        String          
    item            Item?            @relation(fields: [itemId], references: [id], name:"item")  
    tagId          String          
    tag              Tag?              @relation(fields: [tagId], references: [id], name:"tag")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model SuggestionFeedback {

    id                String        @id @default(uuid())  
    feedback    String?          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    itemId        String          
    item            Item?            @relation(fields: [itemId], references: [id], name:"item")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Organization {
    id               String             @id @default(uuid())
    name             String
    pictureUrl       String?            @default('https://i.imgur.com/BgkFiid.jpeg')
    
    stripeCustomerId String?
    
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt @default(now())
    roles            OrganizationRole[]

items          Item[]        @relation("organization")  

@@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}
model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

@@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    stripeCustomerId  String?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]
    
    organizationRoles OrganizationRole[]

pushNotifications PushNotification[] @relation("user")

items          Item[]        @relation("user")  
        categorys  Category[]  @relation("user")  
        tags            Tag[]          @relation("user")  
        suggestionFeedbacks  SuggestionFeedback[]  @relation("user")  

@@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model PushNotification {
    id           String   @id @default(uuid())
    endpoint     String
    subscription String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt @default(now())

    userId       String
    user         User     @relation(fields: [userId], references: [id], name: 'user')

@@allow("all", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}
